# Copyright (c) Facebook, Inc. and its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: AX Complete Trails
description: |
  Complete Trials for Training.
inputs:
  - {name: Client}
  - {name: Training Results}
outputs:
  - {name: Best Parameters, description: 'Best Model Parameters'}
implementation:
  container:
    image: k3d-myregistry.localhost:5000/muzhi1991/pytorch_kfp_components:2B1C27A7
    command:
      - sh
      - -ec
      - |
        # This is how additional packages can be installed dynamically
        python3 -m pip install --user --no-warn-script-location ax-platform SQLAlchemy
        # Run the rest of the command after installing the packages.
        "$0" "$@"
      - python3
      - -u # Auto-flush. We want the logs to appear in the console immediately.
      - -c # Inline scripts are easy, but have size limitaions and the error traces do not show source lines.
      - "import os\nimport sys\nimport json\nfrom ax.service.ax_client import AxClient\n\nclient_json_path = sys.argv[1]\nresults = sys.argv[2]\nbest_parameters_path = sys.argv[3]\n\nax_client = AxClient()\nclient_json = client_json_path+'/client.json'\nax_client = ax_client.load_from_json_file(client_json)\n\nwith open(results, 'r') as fp:\n  data = json.load(fp)\n\nfor trial_index in data:\n  ax_client.complete_trial(int(trial_index), data[trial_index])\nbest_parameters, metrics = ax_client.get_best_parameters()\n\nos.makedirs(os.path.dirname(best_parameters_path), exist_ok=True)\nwith open(best_parameters_path, 'w') as writer:\n  writer.write(json.dumps(best_parameters))\n        \n"
      - {inputPath: Client}
      - {inputValue: Training Results}
      - {outputPath: Best Parameters}
